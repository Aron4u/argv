{"google":"","body":"# argv\r\n\r\nargv is a nodejs module that does command line argument parsing.\r\n\r\n\r\n### Installation\r\n\r\n```bash\r\n$ npm install argv\r\n```\r\n\r\n\r\n### Usage\r\n\r\n```js\r\nvar argv = require( 'argv' );\r\nvar args = argv.option( options ).run();\r\n-> { targets: [], options: {} }\r\n```\r\n\r\n\r\n### Run\r\n\r\nRuns the argument parser on the global arguments. Custom arguments array can be used by passing into this method\r\n\r\n```js\r\n// Parses default arguments 'process.argv.slice( 2 )'\r\nargv.run();\r\n\r\n// Parses array instead\r\nargv.run([ '--option=123', '-o', '123' ]);\r\n```\r\n\r\n\r\n### Options\r\n\r\nargv is a strict argument parser, which means all options must be defined before parsing starts.\r\n\r\n```js\r\nargv.option({\r\n\tname: 'option',\r\n\tshort: 'o',\r\n\ttype: 'string',\r\n\tdescription: 'Defines an option for your script',\r\n\texample: \"'script --opiton=value' or 'script -o value'\"\r\n});\r\n```\r\n\r\n\r\n### Modules\r\n\r\nModules are nested commands for more complicated scripts. Each module has it's own set of options that\r\nhave to be defined independently of the root options.\r\n\r\n```js\r\nargv.mod({\r\n\tmod: 'module',\r\n\tdescription: 'Description of what the module is used for',\r\n\toptions: [ list of options ]\r\n});\r\n```\r\n\r\n\r\n### Types\r\n\r\nTypes convert option values to useful js objects. They are defined along with each option.\r\n\r\n* **string**: Ensure values are strings\r\n* **path**: Converts value into a fully resolved path.\r\n* **int**: Converts value into an integer\r\n* **float**: Converts value into a float number\r\n* **boolean**: Converts value into a boolean object. 'true' and '1' are converted to true, everything else is false.\r\n* **csv**: Converts value into an array by splitting on comma's.\r\n* **list**: Allows for option to be defined multiple times, and each value added to an array\r\n* **[list|csv],[type]**: Combo type that allows you to create a list or csv and convert each individual value into a type.\r\n\r\n```js\r\nargv.option([\r\n\t{\r\n\t\tname: 'option',\r\n\t\ttype: 'csv,int'\r\n\t},\r\n\t{\r\n\t\tname: 'path',\r\n\t\tshort: 'p',\r\n\t\ttype: 'list,path'\r\n\t}\r\n]);\r\n\r\n// csv and int combo\r\n$ script --option=123,456.001,789.01\r\n-> option: [ 123, 456, 789 ]\r\n\r\n// list and path combo\r\n$ script -p /path/to/file1 -p /path/to/file2\r\n-> option: [ '/path/to/file1', '/path/to/file2' ]\r\n```\r\n\r\nYou can also create your own custom type for special conversions.\r\n\r\n```js\r\nargv.type( 'squared', function( value ) {\r\n\tvalue = parseFloat( value );\r\n\treturn value * value;\r\n});\r\n\r\nargv.option({\r\n\tname: 'square',\r\n\tshort: 's',\r\n\ttype: 'squared'\r\n});\r\n\r\n$ script -s 2\r\n-> 4\r\n```\r\n\r\n\r\n### Version\r\n\r\nDefining the scripts version number will add the version option and print it out when asked.\r\n\r\n```js\r\nargv.version( 'v1.0' );\r\n\r\n$ script --version\r\nv1.0\r\n\r\n```\r\n\r\n\r\n### Info\r\n\r\nCustom information can be displayed at the top of the help printout using this method\r\n\r\n```js\r\nargv.info( 'Special script info' );\r\n\r\n$ script --help\r\n\r\nSpecial script info\r\n\r\n... Rest of Help Doc ...\r\n```\r\n\r\n\r\n### Clear\r\n\r\nIf you have competing scripts accessing the argv object, you can clear out any previous options that may have been set.\r\n\r\n```js\r\nargv.clear().option( [new options] );\r\n```\r\n\r\n\r\n### Help\r\n\r\nargv injects a default help option initially and on clears. The help() method triggers the help printout.\r\n\r\n```js\r\nargv.help();\r\n```\r\n","name":"argv","tagline":"Node based command line argument parser","note":"Don't delete this file! It's used internally to help with page regeneration."}